<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="com.tangdi.production.tdauth.dao.MenuDao">	<resultMap type="MenuInf" id="menuMap">		<result property="menuId" column="MENU_ID" />		<result property="sysId" column="SYS_ID" />		<result property="menuName" column="MENU_NAM" />		<result property="menuUrl" column="MENU_URL" />		<result property="menuStatus" column="MENU_STATE" />		<result property="menuType" column="MENU_TYPE" />		<result property="menuParId" column="MENU_PAR_ID" />		<result property="menuCode" column="MENU_CODE" />		<result property="menuIsLeaf" column="MENU_IS_LEAF" />		<result property="checked" column="state" />	</resultMap>	<!-- resultMap type="com.tangdi.production.tdauth.domain.Tree" id="treeMap"> <result property="id" column="MENU_ID" /> <result property="text" column="MENU_NAME" /> <result property="menuParId" column="MENU_PAR_ID" /> <result property="checked" column="state" /> </resultMap> -->	<insert id="insertMenuRoleRel" parameterType="RoleMenuButtonRelInf">		INSERT INTO AUTH_ROLE_MENU_REL_INF (R_ID, MENU_ID)		VALUES (#{roleId}, #{menuId})	</insert>	<delete id="deleteMenuRoleRel" parameterType="java.lang.String">		DELETE FROM AUTH_ROLE_MENU_REL_INF		<where>			<if test="menuId != null and menuId != ''">				MENU_ID like CONCAT(#{menuId},'%')			</if>		</where>	</delete>	<select id="countEntity" parameterType="MenuInf" resultType="java.lang.Integer">		SELECT COUNT(*) FROM AUTH_MENU_INF		<where>			<if test="menuId != null and menuId != ''">				MENU_ID = #{menuId}			</if>			<if test="menuName != null and menuName!=''">				and MENU_NAME LIKE CONCAT('%',#{menuName},'%')			</if>			<if test="menuUrl != null and menuUrl !=''">				and MENU_URL LIKE CONCAT('%',#{menuUrl},'%')			</if>			<if test="menuStatus != null">				and MENU_STATUS = #{menuStatus}			</if>			<if test="menuType != null">				and MENU_TYPE = #{menuType}			</if>			<if test="menuParId != null and menuParId != ''">				and MENU_PAR_ID = #{menuParId}			</if>			<if test="menuCode != null and menuCode != ''">				and MENU_CODE = #{menuCode}			</if>			<if test="sysId != null and sysId != ''">				and SYS_ID = #{sysId}			</if>			or MENU_PAR_ID in( select MENU_ID from AUTH_MENU_INF where 1=1 			<if test="menuName != null and menuName != ''">				and MENU_NAME LIKE CONCAT('%',#{menuName},'%')			</if>			<if test="menuUrl != null and menuUrl != ''">				and MENU_URL LIKE CONCAT('%',#{menuUrl},'%')			</if>			<if test="menuType != null ">				and MENU_TYPE = '1'			</if>			<if test="menuStatus != null ">				and MENU_STATUS = #{menuStatus}			</if>			<if test="sysId != null and sysId != ''">				and SYS_ID = #{sysId}			</if>			)		</where>	</select>	<select id="selectEntity" parameterType="MenuInf" resultMap="menuMap">		SELECT MENU_ID, MENU_NAME, MENU_URL, MENU_STATUS, MENU_TYPE,		MENU_PAR_ID, SYS_ID,MENU_IS_LEAF		FROM AUTH_MENU_INF		<where>			<if test="menuId != null">				MENU_ID = #{menuId}			</if>			<if test="menuName != null">				and MENU_NAME LIKE CONCAT('%',#{menuName},'%')			</if>			<if test="menuStatus != null">				and MENU_STATUS = #{menuStatus}			</if>			<if test="menuType != null">				and MENU_TYPE = #{menuType}			</if>			<if test="menuParId != null">				and MENU_PAR_ID = #{menuParId}			</if>			<if test="menuCode != null">				and MENU_CODE = #{menuCode}			</if>			<if test="sysId != null">				and SYS_ID = #{sysId}			</if>		</where>	</select>	<select id="selectList" parameterType="MenuInf" resultMap="menuMap">		SELECT MENU_ID, MENU_NAME, MENU_URL, MENU_STATUS, MENU_TYPE,		MENU_PAR_ID, SYS_ID,MENU_IS_LEAF		FROM AUTH_MENU_INF		<where>			<if test="menuId != null">				MENU_ID = #{menuId}			</if>			<if test="menuName != null">				and MENU_NAME LIKE CONCAT('%',#{menuName},'%')			</if>			<if test="menuStatus != null">				and MENU_STATUS = #{menuStatus}			</if>			<if test="menuType != null">				and MENU_TYPE = #{menuType}			</if>			<if test="menuParId != null">				and MENU_PAR_ID = #{menuParId}			</if>			<if test="menuCode != null">				and MENU_CODE = #{menuCode}			</if>			<if test="sysId != null">				and SYS_ID = #{sysId}			</if>		</where>	</select>	<select id="selectAuthMenu" parameterType="java.util.Map" resultMap="menuMap">		<!-- SELECT MENU_ID, MENU_NAME, MENU_URL, MENU_STATUS, MENU_TYPE, MENU_PAR_ID, SYS_ID, MENU_IS_LEAF FROM AUTH_MENU_INF T1 WHERE EXISTS (select 'X' from AUTH_ROLE_MENU_REL_INF T2 where T2.MENU_ID=T1.MENU_ID and EXISTS (select 'X' from AUTH_USER_ROLE_REL_INF T3 where T3.R_ID=T2.R_ID and U_ID =#{u_Id}) ) and MENU_TYPE = 0 order by MENU_ID -->		<!-- 2015-03-17 添加系统控制，要求当前用户查询到的菜单必须是用户当前登录的系统内的菜单 -->		SELECT		MENU_ID,		MENU_NAM,		MENU_URL,		MENU_STATE,		NODE_TYPE,		MENU_PAR_ID,		SYS_ID,		MENU_IS_LEAF		FROM		PMMENINF T1		WHERE		EXISTS		(select 'X' from PMRMRELE T2 where		T2.MENU_ID=T1.MENU_ID and EXISTS (		select 'X' from PMRURELE T3		where T3.ROLE_ID=T2.ROLE_ID and USER_ID =#{u_Id}		and EXISTS (		select 'X' from PMROLEINF T4		where T4.role_id=T3.ROLE_ID and ROLE_STATE='1'		))		) 		and EXISTS(			select 'X' from PMUSRINF us 			where us.USER_ID=#{u_Id} and T1.SYS_ID=#{sysId}		)		and NODE_TYPE = '0' and MENU_STATE='1' order by MENU_ID	</select>	<select id="selectMenuUrlByUid" parameterType="java.util.Map" resultMap="menuMap">		<!--SELECT MENU_URL,1 as state FROM AUTH_MENU_INF T1 WHERE menu_type!='2' and MENU_URL is not null and EXISTS (select 'X' from AUTH_ROLE_MENU_REL_INF T2 where T2.MENU_ID=T1.MENU_ID and EXISTS (select 'X' from AUTH_USER_ROLE_REL_INF T3 where T3.R_ID=T2.R_ID and U_ID =#{u_Id}) ) union SELECT MENU_URL,1 as state FROM AUTH_MENU_INF T1 WHERE menu_type='2' and MENU_URL is not null union SELECT MENU_URL,0 as state FROM AUTH_MENU_INF T1 WHERE menu_type!='2' and MENU_URL is not null and NOT EXISTS (select 'X' from AUTH_ROLE_MENU_REL_INF T2 where T2.MENU_ID=T1.MENU_ID and EXISTS (select 'X' from AUTH_USER_ROLE_REL_INF T3 where T3.R_ID=T2.R_ID and U_ID =#{u_Id}) ) -->		SELECT		MENU_URL,1 as state		FROM		PMMENINF T1		WHERE		t1.node_type!='2' and MENU_URL is not null and EXISTS		(select 'X' from PMRMRELE T2 where		T2.MENU_ID=T1.MENU_ID and EXISTS (		select 'X' from PMRURELE T3		where T3.ROLE_ID=T2.ROLE_ID and USER_ID =#{u_Id}		and EXISTS(select 'X' from PMROLEINF T4 where T4.role_id=T3.ROLE_ID and role_state='1'))		)  AND SYS_ID=#{sysId}		union		SELECT		MENU_URL,1 as state		FROM		PMMENINF T1		WHERE		node_type='2' and MENU_URL is not null		union		SELECT		MENU_URL,1 as state		FROM		PMMENINF T1		WHERE		node_type!='2' and MENU_URL is not null and NOT EXISTS		(select 'X' from PMRMRELE T2 where		T2.MENU_ID=T1.MENU_ID and EXISTS (		select 'X' from PMRURELE T3		where T3.Role_ID=T2.Role_ID and USER_ID =#{u_Id}		and EXISTS(select 'X' from PMROLEINF T4 where T4.role_id=T3.Role_ID and role_state='1'))		)   AND SYS_ID=#{sysId}	</select>	<insert id="insertEntity" parameterType="MenuInf">		INSERT INTO AUTH_MENU_INF (MENU_ID, MENU_NAME, MENU_URL, MENU_STATUS,		MENU_TYPE, MENU_PAR_ID, MENU_CODE, SYS_ID,MENU_IS_LEAF)		VALUES (#{menuId}, #{menuName}, #{menuUrl}, #{menuStatus}, #{menuType},		#{menuParId}, #{menuCode}, #{sysId},#{menuIsLeaf})	</insert>	<!-- ORACLE的特殊批量语法? -->	<insert id="insertList" parameterType="java.util.List" databaseId="oracle">		INSERT INTO AUTH_MENU_INF (MENU_ID, MENU_NAME, MENU_URL, MENU_STATUS,		MENU_TYPE, MENU_PAR_ID, MENU_CODE, SYS_ID,MENU_IS_LEAF)		<foreach collection="list" item="item" index="index" separator="union all">			SELECT			#{item.menuId},			#{item.menuName},			#{item.menuUrl},			#{item.menuStatus},			#{item.menuType},			#{item.menuParId},			#{item.menuCode},			#{item.sysId},			#{item.menuIsLeaf}			FROM DUAL		</foreach>	</insert>		<update id="updateEntity" parameterType="MenuInf">		UPDATE AUTH_MENU_INF		<set>			<if test="menuName != null">				MENU_NAME = #{menuName},			</if>			<if test="menuStatus != null ">				MENU_STATUS = #{menuStatus},			</if>			<if test="menuUrl != null ">				MENU_URL = #{menuUrl},			</if>			<if test="menuIsLeaf != null">			    MENU_IS_LEAF = #{menuIsLeaf}			</if>		</set>		<where>			<if test="menuId != null and menuId !=''">				MENU_ID = #{menuId}			</if>		</where>	</update>	<delete id="deleteEntity" parameterType="MenuInf">		DELETE FROM AUTH_MENU_INF		<where>			<if test="menuId != null">				MENU_ID = #{menuId}			</if>			<if test="menuName != null">				AND MENU_NAME LIKE CONCAT(#{menuName},'%')			</if>			<if test="menuStatus != null">				AND MENU_STATUS = #{menuStatus}			</if>			<if test="menuType != null">				AND MENU_TYPE = #{menuType}			</if>			<if test="menuParId != null">				AND MENU_PAR_ID = #{menuParId}			</if>			<if test="menuCode != null">				AND MENU_CODE = #{menuCode}			</if>			<if test="sysId != null">				AND SYS_ID = #{sysId}			</if>		</where>	</delete>	<select id="findListPage" parameterType="java.util.HashMap" resultMap="menuMap" databaseId="oracle">		SELECT MENU_ID, MENU_NAME, MENU_URL, MENU_STATUS, MENU_TYPE,		MENU_PAR_ID, SYS_ID,MENU_IS_LEAF		FROM		(		SELECT MENU_ID, MENU_NAME, MENU_URL, MENU_STATUS, MENU_TYPE,		MENU_PAR_ID, SYS_ID, MENU_IS_LEAF,ROWNUM RN		FROM (SELECT MENU_ID, MENU_NAME, MENU_URL, MENU_STATUS, MENU_TYPE,		MENU_PAR_ID, SYS_ID ,MENU_IS_LEAF FROM AUTH_MENU_INF		<where>			<if test="menuName != null and menuName != ''">				and MENU_NAME LIKE '%'||#{menuName}||'%'			</if>			<if test="menuUrl != null and menuUrl != ''">				and MENU_URL LIKE '%'||#{menuUrl}||'%'			</if>			<if test="menuType != null ">				and MENU_TYPE = #{menuType}			</if>			<if test="menuStatus != null ">				and MENU_STATUS = #{menuStatus}			</if>			<if test="sysId != null and sysId != ''">				and SYS_ID = #{sysId}			</if>		</where>		order by MENU_ID asc		) A		WHERE ROWNUM &lt;= #{end}		)		WHERE RN &gt;= #{start}	</select>	<select id="findListPage" parameterType="java.util.HashMap" resultMap="menuMap" databaseId="mysql">		SELECT MENU_ID, MENU_NAME, MENU_URL, MENU_STATUS, MENU_TYPE,		MENU_PAR_ID, SYS_ID,MENU_IS_LEAF		FROM		AUTH_MENU_INF		<where>			<if test="menuName != null and menuName != ''">				and MENU_NAME LIKE CONCAT('%',#{menuName},'%')			</if>			<if test="menuUrl != null and menuUrl != ''">				and MENU_URL LIKE CONCAT('%',#{menuUrl},'%')			</if>			<if test="menuType != null ">				and MENU_TYPE = #{menuType}			</if>			<if test="menuStatus != null ">				and MENU_STATUS = #{menuStatus}			</if>			<if test="sysId != null and sysId != ''">				and SYS_ID = #{sysId}			</if>			or MENU_PAR_ID in( select MENU_ID from AUTH_MENU_INF where 1=1 			<if test="menuName != null and menuName != ''">				and MENU_NAME LIKE CONCAT('%',#{menuName},'%')			</if>			<if test="menuUrl != null and menuUrl != ''">				and MENU_URL LIKE CONCAT('%',#{menuUrl},'%')			</if>			<if test="menuType != null ">				and MENU_TYPE = '1'			</if>			<if test="menuStatus != null ">				and MENU_STATUS = #{menuStatus}			</if>			<if test="sysId != null and sysId != ''">				and SYS_ID = #{sysId}			</if>			)					</where>		order by MENU_ID asc LIMIT #{start},#{pageSize}	</select>	<select id="selectMenuId" resultType="java.lang.String" parameterType="java.lang.String" databaseId="oracle">		SELECT		T1.MENU_ID		FROM		(SELECT		T11.MENU_ID,		T11.MENU_PAR_ID		FROM		AUTH_MENU_INF T11		WHERE		T11.MENU_PAR_ID = #{pid}		ORDER BY T11.MENU_ID DESC) T1		WHERE		ROWNUM = 1	</select>	<select id="selectMenuId" resultType="java.lang.String" parameterType="java.lang.String" databaseId="mysql">		SELECT		T1.MENU_ID		FROM		(SELECT		T11.MENU_ID,		T11.MENU_PAR_ID		FROM		AUTH_MENU_INF T11		WHERE		T11.MENU_PAR_ID = #{pid}		ORDER BY T11.MENU_ID DESC) T1		LIMIT 0,1	</select>	<delete id="deleteMenu" parameterType="java.lang.String" databaseId="oracle">		DELETE FROM		AUTH_MENU_INF		WHERE		MENU_ID IN ( SELECT		MENU_ID		FROM		AUTH_MENU_INF		START WITH MENU_ID=#{menuId}		CONNECT BY PRIOR MENU_ID = MENU_PAR_ID		)	</delete>	<delete id="deleteMenu" parameterType="java.lang.String" databaseId="mysql">		DELETE FROM		AUTH_MENU_INF		WHERE		MENU_ID LIKE CONCAT(#{menuId},'%')	</delete>	<select id="selectMenuByUid" parameterType="java.util.HashMap" resultMap="menuMap">		<!--select MENU_ID,menu_name,0 as state,MENU_PAR_ID from AUTH_MENU_INF T1 where EXISTS (select 'X' from AUTH_ROLE_MENU_REL_INF T2 where T2.MENU_ID=T1.MENU_ID and EXISTS (select 'X' from AUTH_USER_ROLE_REL_INF T3 where T3.R_ID=T2.R_ID and U_ID =#{u_Id}) ) order by MENU_ID -->		select MENU_ID,menu_nam,0 as state,MENU_PAR_ID,MENU_STATE,NODE_TYPE from PMMENINF   T1 where		EXISTS		(select 'X' from PMRMRELE T2 where		T2.MENU_ID=T1.MENU_ID and EXISTS (		select 'X' from PMRURELE T3		where T3.ROLE_ID=T2.ROLE_ID and USER_ID =#{uId}		and EXISTS(select 'X' from PMROLEINF T4 where T4.role_id=T3.ROLE_ID and role_state='1'))		) 		<if test="sysId != null and sysId != ''">			and T1.SYS_ID=#{sysId}		</if>				order by MENU_ID	</select>	<select id="selectMenuByUidRidOld" parameterType="java.util.HashMap" resultMap="menuMap">		<!--select MENU_ID,menu_name,state,MENU_PAR_ID from (select MENU_ID,menu_name,1 as state,MENU_PAR_ID from AUTH_MENU_INF T1 where EXISTS (select 'X' from AUTH_ROLE_MENU_REL_INF T2 where T2.MENU_ID=T1.MENU_ID and T2.R_ID=#{roleId} and EXISTS (select 'X' from AUTH_ROLE_MENU_REL_INF T3 where T3.MENU_ID=T2.MENU_ID and EXISTS (select 'X' from AUTH_USER_ROLE_REL_INF T4 where T4.R_ID=T3.R_ID and T4.U_ID =#{u_Id} ) ) ) union select MENU_ID,menu_name,0 as state,MENU_PAR_ID from AUTH_MENU_INF T1 where EXISTS (select 'X' from AUTH_ROLE_MENU_REL_INF T2 where T2.MENU_ID=T1.MENU_ID and EXISTS (select 'X' from AUTH_USER_ROLE_REL_INF T3 where T3.R_ID=T2.R_ID and T3.U_ID =#{u_Id}) and NOT EXISTS( select 'X' from AUTH_ROLE_MENU_REL_INF 			T4 where T4.MENU_ID=T2.MENU_ID and T4.R_ID =#{roleId} ) )) order by MENU_ID -->		select MENU_ID,menu_name,state,MENU_PAR_ID from		(select MENU_ID,menu_name,1 as state,MENU_PAR_ID from AUTH_MENU_INF T1 where EXISTS		(select 'X' from AUTH_ROLE_MENU_REL_INF T2 where T2.MENU_ID=T1.MENU_ID and T2.R_ID=#{roleId} and EXISTS		(select 'X' from AUTH_ROLE_MENU_REL_INF T3 where T3.MENU_ID=T2.MENU_ID and EXISTS		(select 'X' from AUTH_USER_ROLE_REL_INF T4 where T4.R_ID=T3.R_ID and T4.U_ID =#{u_Id}		and EXISTS(select 'X' from AUTH_ROLE_INF T5 where T5.role_id=T4.R_ID and role_status='0')		)		)		)		union		select MENU_ID,menu_name,0 as state,MENU_PAR_ID from AUTH_MENU_INF T1 where EXISTS		(select 'X' from AUTH_ROLE_MENU_REL_INF T2 where T2.MENU_ID=T1.MENU_ID and EXISTS		(select 'X' from AUTH_USER_ROLE_REL_INF T3 where		T3.R_ID=T2.R_ID and T3.U_ID =#{u_Id})		and NOT EXISTS(		select 'X' from AUTH_ROLE_MENU_REL_INF T4 where T4.MENU_ID=T2.MENU_ID and T4.R_ID =#{roleId}		and EXISTS(select 'X' from AUTH_ROLE_INF T5 where T5.role_id=T4.R_ID and role_status='0')		)		)) tree 		order by MENU_ID	</select>	<select id="selectMenuByUidRid" parameterType="java.util.HashMap" resultMap="menuMap">		<!--select MENU_ID,menu_name,state,MENU_PAR_ID from (select MENU_ID,menu_name,1 as state,MENU_PAR_ID from AUTH_MENU_INF T1 where EXISTS (select 'X' from AUTH_ROLE_MENU_REL_INF T2 where T2.MENU_ID=T1.MENU_ID and T2.R_ID=#{roleId} and EXISTS (select 'X' from AUTH_ROLE_MENU_REL_INF T3 where T3.MENU_ID=T2.MENU_ID and EXISTS (select 'X' from AUTH_USER_ROLE_REL_INF T4 where T4.R_ID=T3.R_ID and T4.U_ID =#{u_Id} ) ) ) union select MENU_ID,menu_name,0 as state,MENU_PAR_ID from AUTH_MENU_INF T1 where EXISTS (select 'X' from AUTH_ROLE_MENU_REL_INF T2 where T2.MENU_ID=T1.MENU_ID and EXISTS (select 'X' from AUTH_USER_ROLE_REL_INF T3 where T3.R_ID=T2.R_ID and T3.U_ID =#{u_Id}) and NOT EXISTS( select 'X' from AUTH_ROLE_MENU_REL_INF 			T4 where T4.MENU_ID=T2.MENU_ID and T4.R_ID =#{roleId} ) )) order by MENU_ID -->		SELECT			menu.MENU_ID,			menu.menu_nam,			CASE WHEN menu.MENU_ID=rm.MENU_ID AND menu.MENU_ID IS NOT NULL THEN 1 ELSE 0 END state,			menu.MENU_PAR_ID,			rm.MENU_ID,			menu.NODE_TYPE,			menu.MENU_STATE		FROM(			SELECT DISTINCT				menu.MENU_ID,				menu.menu_nam,				menu.MENU_PAR_ID,				menu.NODE_TYPE,				menu.MENU_STATE			FROM PMRURELE ur 				LEFT JOIN PMROLEINF r ON r.ROLE_ID = ur.ROLE_ID		LEFT JOIN PMRMRELE rm ON r.ROLE_ID = rm.ROLE_ID		LEFT JOIN PMMENINF menu ON menu.MENU_ID = rm.MENU_ID			WHERE 1=1			<if test="u_Id != '1000'.toString()">				AND ur.USER_ID=#{u_Id}			</if>			 			<if test="sysId != null and sysId != ''">				AND menu.SYS_ID = #{sysId}			</if>			 AND r.ROLE_STATE='1'		) menu		LEFT JOIN PMRMRELE  rm ON rm.MENU_ID=menu.MENU_ID and rm.ROLE_ID=#{roleId}		ORDER BY menu.MENU_ID	</select>	<select id="selectMenuByAuditId" parameterType="java.util.HashMap" resultMap="menuMap">		<!--select MENU_ID,menu_name,state,MENU_PAR_ID from (select MENU_ID,menu_name,1 as state,MENU_PAR_ID from AUTH_MENU_INF T1 where EXISTS (select MENU_ID from AUTH_AUDIT_MENU_REL_INF T2 where T2.AUDIT_ID=#{auditId} and T2.MENU_ID=T1.MENU_ID and EXISTS( select 'X' from AUTH_MENU_INF T3 where T3.MENU_ID=T2.MENU_ID ) ) union select MENU_ID,menu_name,0 as state,MENU_PAR_ID from AUTH_MENU_INF T1 where EXISTS (select 'X' from AUTH_MENU_INF T2 where T2.MENU_ID=T1.MENU_ID and NOT EXISTS (select 'X' from AUTH_AUDIT_MENU_REL_INF T3 where T3.MENU_ID=T2.MENU_ID and T3.AUDIT_ID=#{auditId}) ) ) order by MENU_ID -->		select MENU_ID,menu_name,state,MENU_PAR_ID from		(select MENU_ID,menu_name,1 as state,MENU_PAR_ID from AUTH_MENU_INF T1 where EXISTS		(select MENU_ID from AUTH_AUDIT_MENU_REL_INF T2 where T2.AUDIT_ID=#{auditId} and T2.MENU_ID=T1.MENU_ID		and EXISTS(select 'X' from AUTH_MENU_INF T3 where T3.MENU_ID=T2.MENU_ID)		)		union		select MENU_ID,menu_name,0 as state,MENU_PAR_ID from AUTH_MENU_INF T1 where EXISTS		(select 'X' from AUTH_MENU_INF T2 where T2.MENU_ID=T1.MENU_ID and NOT EXISTS		(select 'X' from AUTH_AUDIT_MENU_REL_INF T3 where T3.MENU_ID=T2.MENU_ID and T3.AUDIT_ID=#{auditId}		and EXISTS(select 'X' from AUTH_ROLE_INF T4 where role_status='0')		)		) ) tree order by MENU_ID	</select>	<select id="selectCheckMenuByAuditId" parameterType="java.util.HashMap" resultMap="menuMap">		select MENU_URl,menu_name from AUTH_MENU_INF T1 where EXISTS		(select MENU_ID from AUTH_AUDIT_MENU_REL_INF T2 where T2.AUDIT_ID=#{auditId} and T2.MENU_ID=T1.MENU_ID		and EXISTS(		select 'X' from AUTH_MENU_INF T3 where T3.MENU_ID=T2.MENU_ID		)		) and MENU_URl is not null order by MENU_ID	</select>	<select id="selectMenuByRid" parameterType="java.lang.String" resultMap="menuMap">		<!--select MENU_ID,menu_name,0 as state,MENU_PAR_ID from AUTH_MENU_INF T1 where EXISTS (select MENU_ID from AUTH_ROLE_MENU_REL_INF T2 where T2.MENU_ID=T1.MENU_ID R_ID =#{roleId}) order by MENU_ID -->		select MENU_ID,menu_name,0 as state,MENU_PAR_ID from AUTH_MENU_INF T1 where EXISTS		(select MENU_ID from AUTH_ROLE_MENU_REL_INF T2 where T2.MENU_ID=T1.MENU_ID R_ID =#{roleId} and role_status='0')		order by MENU_ID	</select>	<update id="updateMenuStatus" parameterType="java.util.HashMap">		UPDATE AUTH_MENU_INF		<set>			<if test="menuStatus != null ">				MENU_STATUS = #{menuStatus},			</if>		</set>		<where>			<if test="menuId != null and menuId !=''">				MENU_ID IN (${menuId})			</if>		</where>	</update></mapper>